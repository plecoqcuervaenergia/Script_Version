[
    {
        "id": "2712839e4de2d960",
        "type": "tab",
        "label": "Fotovoltaica_UNIV_MADRID",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7270bff791d922f6",
        "type": "group",
        "z": "2712839e4de2d960",
        "style": {
            "stroke": "#2a2a2a",
            "stroke-opacity": "1",
            "fill": "#0d0d0d",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "e67f099aa8cac4cf",
            "2895484c0427f6fa",
            "f6f619f0448031fb",
            "6bfa28b54d55b8ef",
            "5cd7e5a7fa3ae97d",
            "bb30ecb042f62688",
            "518bc6419c455688",
            "9ca92545bcb3112e",
            "1b5fc013da142ca2",
            "82cda4b23e81bef8",
            "a36fa9eca0f14f8c",
            "fa29f937cfa1a388",
            "6e936e0799b6103e",
            "6d8910b10fc02638",
            "d5a21d2008515361",
            "944af3f5821a881c",
            "afabf483ebd8d3ad",
            "968bce566a51f483",
            "5100f29857b7e882"
        ],
        "x": 874,
        "y": 759,
        "w": 1792,
        "h": 502
    },
    {
        "id": "76c0e9f2c89dabb0",
        "type": "group",
        "z": "2712839e4de2d960",
        "style": {
            "stroke": "#2a2a2a",
            "stroke-opacity": "1",
            "fill": "#0d0d0d",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "f1e5d6761ba3dc38",
            "db5fb5456e5f6a1b",
            "321677345e439252",
            "26825d69f722cab8",
            "6d5655c24320f762",
            "41ef5e6f770811db",
            "9c94e6c47e045cc6",
            "79ac5da96863155c",
            "86d6f79577104659",
            "4f7f84fb02f728f6",
            "ce267b434ea48920",
            "cbcffaba4f2a5fe1",
            "8080b13d4e3a0db0"
        ],
        "x": 874,
        "y": 239,
        "w": 1272,
        "h": 342
    },
    {
        "id": "ba3398c131b492c3",
        "type": "group",
        "z": "2712839e4de2d960",
        "style": {
            "stroke": "#2a2a2a",
            "stroke-opacity": "1",
            "fill": "#0d0d0d",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "80aec98ec71fd81a",
            "2eb7b242fa01841f",
            "53ea2fd20daf41b8",
            "6d977a5c73cafa31"
        ],
        "x": 874,
        "y": 19,
        "w": 472,
        "h": 162
    },
    {
        "id": "f1e5d6761ba3dc38",
        "type": "mysql",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "mydb": "8abc56218783dc0e",
        "name": "DB_Fotov_UNIV_Madrid",
        "x": 1550,
        "y": 480,
        "wires": [
            [
                "86d6f79577104659",
                "8080b13d4e3a0db0"
            ]
        ]
    },
    {
        "id": "db5fb5456e5f6a1b",
        "type": "function",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "Control_Formato_Graf",
        "func": "// Configuración de control para el nodo ui_chart\nmsg.ui_control = {\n  options: {\n    scales: {\n      xAxes: [\n        {\n          stacked: true,            // Apila las series en el eje X\n          ticks: {\n            fontColor: '#FFFFFF'    // Color blanco para las etiquetas del eje X\n          },\n          gridLines: {\n            // Configuración para ocultar las líneas de la cuadrícula vertical (eje X)\n            zeroLineColor: '#FFFFFF', // Color de la línea en el valor cero (no se verá si lineWidth = 0)\n            color: '#FFFFFF',         // Color de las líneas (no se verán si display = false)\n            lineWidth: 0.0,           // Grosor cero para deshabilitar trazado de líneas\n            display: false            // No mostrar líneas verticales\n          }\n        }\n      ],\n      yAxes: [\n        {\n          stacked: true,            // Apila las series en el eje Y\n          ticks: {\n            fontColor: '#FFFFFF'    // Color blanco para las etiquetas del eje Y\n          },\n          gridLines: {\n            // Configuración para mostrar las líneas horizontales del eje Y\n            zeroLineColor: '#FFFFFF', // Color de la línea horizontal en el valor cero\n            color: '#FFFFFF',         // Color de las demás líneas de la cuadrícula\n            lineWidth: 0.5,           // Grosor de las líneas horizontales\n            // display: false         // Si se habilita, ocultaría todas las líneas horizontales\n          }\n          // Opciones adicionales para definir rango manualmente:\n          // min: 0,                   // Valor mínimo del eje Y\n          // max: 100                  // Valor máximo del eje Y\n        }\n      ]\n    }\n  }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 360,
        "wires": [
            [
                "41ef5e6f770811db"
            ]
        ]
    },
    {
        "id": "321677345e439252",
        "type": "inject",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "Ejecución_Código",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 360,
        "wires": [
            [
                "4f7f84fb02f728f6"
            ]
        ]
    },
    {
        "id": "26825d69f722cab8",
        "type": "ui_template",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "group": "0a6525c364ecabac",
        "name": "Animaciones",
        "order": 2,
        "width": 42,
        "height": "2",
        "format": "<!DOCTYPE html>\n<html lang=\"es\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Animación con rango 0–2000</title>\n  <style>\n    /* Reset y posición básica */\n    body {\n      margin: 0;\n      position: relative;\n      font-family: sans-serif;\n    }\n\n    /* Estilo de las líneas de fondo de las barras */\n    .line-bg {\n      stroke: #cccccc;\n      /* Color gris claro */\n      stroke-width: 2;\n      /* Grosor de línea */\n      fill: none;\n      /* Sin relleno */\n    }\n\n    /* Estilo base de las barras animadas */\n    .bar {\n      fill: currentColor;\n      /* Hereda color dinámico vía JS */\n    }\n\n    /* Iconos SVG o FontAwesome superpuestos */\n    .icono-panel,\n    .icono-inversor,\n    .icono-edificio,\n    .icono-grid {\n      position: absolute;\n      top: 0;\n      width: 80px;\n      height: 80px;\n      z-index: 10;\n      fill: currentColor;\n      /* Hereda color dinámico vía JS */\n      color: #cccccc;\n      /* Color gris por defecto */\n    }\n\n    /* Posicionamiento específico de cada icono */\n    .icono-panel {\n      left: 1120px;\n      transform: translateX(-50%);\n    }\n\n    .icono-inversor {\n      left: -330px;\n    }\n\n    .icono-edificio {\n      left: 220px;\n      transform: translateX(-50%);\n      font-size: 60px;\n      /* Ajuste de tamaño para icono FontAwesome */\n    }\n\n    .icono-grid {\n      left: 2020px;\n      transform: translateX(-50%);\n    }\n  </style>\n  <!-- Carga de iconos FontAwesome para el edificio -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\n</head>\n\n<body>\n  <!-- SVG de las dos tiras horizontales con barras animadas -->\n  <svg width=\"2220\" height=\"100\">\n    <!-- Primer tramo: línea de fondo y barra 1 -->\n    <line id=\"lineBg1\" class=\"line-bg\" x1=\"220\" y1=\"40\" x2=\"1120\" y2=\"40\"></line>\n    <rect id=\"bar1\" class=\"bar\" x=\"220\" y=\"37\" width=\"100\" height=\"6\"></rect>\n\n    <!-- Segundo tramo: línea de fondo y barra 2 -->\n    <line id=\"lineBg2\" class=\"line-bg\" x1=\"1120\" y1=\"40\" x2=\"2020\" y2=\"40\"></line>\n    <rect id=\"bar2\" class=\"bar\" x=\"1120\" y=\"37\" width=\"100\" height=\"6\"></rect>\n  </svg>\n\n  <!-- Icono SVG del panel solar -->\n  <svg class=\"icono-panel\" viewBox=\"0 0 96 64\">\n    <defs>\n      <!-- Gradiente principal del panel -->\n      <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n        <stop offset=\"0%\" stop-color=\"#4a90e2\" />\n        <stop offset=\"100%\" stop-color=\"#005f9e\" />\n      </linearGradient>\n      <!-- Sombreado para efecto 3D -->\n      <linearGradient id=\"shade1\" x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\">\n        <stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.2)\" />\n        <stop offset=\"100%\" stop-color=\"transparent\" />\n      </linearGradient>\n    </defs>\n    <!-- Base del panel -->\n    <rect x=\"0\" y=\"8\" width=\"96\" height=\"48\" rx=\"4\" ry=\"4\" fill=\"#333\" />\n    <!-- Celdas del panel con gradiente -->\n    <g fill=\"url(#grad1)\">\n      <rect x=\"4\" y=\"12\" width=\"28\" height=\"40\" />\n      <rect x=\"34\" y=\"12\" width=\"28\" height=\"40\" />\n      <rect x=\"64\" y=\"12\" width=\"28\" height=\"40\" />\n    </g>\n    <!-- Líneas internas blancas semitransparentes -->\n    <g stroke=\"rgba(255,255,255,0.3)\" stroke-width=\"1\">\n      <line x1=\"4\" y1=\"24\" x2=\"32\" y2=\"24\" />\n      <line x1=\"4\" y1=\"36\" x2=\"32\" y2=\"36\" />\n      <line x1=\"34\" y1=\"24\" x2=\"62\" y2=\"24\" />\n      <line x1=\"34\" y1=\"36\" x2=\"62\" y2=\"36\" />\n      <line x1=\"64\" y1=\"24\" x2=\"92\" y2=\"24\" />\n      <line x1=\"64\" y1=\"36\" x2=\"92\" y2=\"36\" />\n      <line x1=\"16\" y1=\"12\" x2=\"16\" y2=\"52\" />\n      <line x1=\"48\" y1=\"12\" x2=\"48\" y2=\"52\" />\n      <line x1=\"80\" y1=\"12\" x2=\"80\" y2=\"52\" />\n    </g>\n    <!-- Sombreado con gradiente sobre las celdas -->\n    <rect x=\"4\" y=\"12\" width=\"28\" height=\"40\" fill=\"url(#shade1)\" />\n    <rect x=\"34\" y=\"12\" width=\"28\" height=\"40\" fill=\"url(#shade1)\" />\n    <rect x=\"64\" y=\"12\" width=\"28\" height=\"40\" fill=\"url(#shade1)\" />\n  </svg>\n\n  <!-- Icono SVG del inversor -->\n  <svg class=\"icono-inversor\" viewBox=\"0 0 48 48\">\n    <!-- Forma simplificada del inversor -->\n    <path d=\"M24 4l-8 14h16l-8-14zm0 40l8-14h-16l8 14zM4 24h14l-8-16 8-16zm40 0h-14l8-16-8-16z\" />\n  </svg>\n\n  <!-- Icono de edificio usando FontAwesome -->\n  <i class=\"fa fa-building icono-edificio\"></i>\n\n  <!-- Icono SVG de la red eléctrica -->\n  <svg class=\"icono-grid\" viewBox=\"0 0 64 64\">\n    <defs>\n      <!-- Gradiente para la caja de la red -->\n      <linearGradient id=\"gradGrid\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n        <stop offset=\"0%\" stop-color=\"#A0A0A0\" />\n        <stop offset=\"100%\" stop-color=\"#606060\" />\n      </linearGradient>\n    </defs>\n    <!-- Representación de conexiones superiores -->\n    <path d=\"M32 2 L32 12 M22 12 L42 12 M32 12 L32 22\" stroke=\"currentColor\" stroke-width=\"4\" fill=\"none\" />\n    <!-- Caja principal de la red -->\n    <rect x=\"10\" y=\"22\" width=\"44\" height=\"30\" rx=\"5\" ry=\"5\" fill=\"url(#gradGrid)\" stroke=\"black\" stroke-width=\"1\" />\n    <!-- Líneas internas de la caja -->\n    <path d=\"M20 30 L20 44 M32 30 L32 44 M44 30 L44 44 M26 37 L38 37\" stroke=\"#E0E0E0\" stroke-width=\"3\" fill=\"none\" />\n    <!-- Conexiones inferiores -->\n    <path d=\"M32 52 L32 62 M22 62 L42 62\" stroke=\"currentColor\" stroke-width=\"4\" fill=\"none\" />\n  </svg>\n\n  <script>\n    (function(scope) {\n      // Parámetros de animación: rango de velocidad v en (0,2000]\n      const MIN_DURATION_MS = 1000;   // Duración mínima de un ciclo (v=2000)\n      const MAX_DURATION_MS = 10000;  // Duración máxima de un ciclo (v→0+)\n      const THRESHOLD = 2000;         // Límite superior de v\n\n      // Variables para almacenamiento de animaciones y tiempos\n      let anim1 = null, start1 = null, dur1 = MAX_DURATION_MS;\n      let anim2 = null, start2 = null, dur2 = MAX_DURATION_MS;\n\n      // Referencias a los elementos SVG y iconos\n      const bar1     = document.getElementById('bar1'),\n            line1    = document.getElementById('lineBg1'),\n            bar2     = document.getElementById('bar2'),\n            line2    = document.getElementById('lineBg2'),\n            icoPanel = document.querySelector('.icono-panel'),\n            icoEdif  = document.querySelector('.icono-edificio'),\n            icoGrid  = document.querySelector('.icono-grid');\n\n      // Calcula distancias útiles para el recorrido de las barras\n      const len1  = +bar1.getAttribute('width'),\n            x1a   = +line1.getAttribute('x1'),\n            x1b   = +line1.getAttribute('x2'),\n            dist1 = (x1b - x1a) - len1;\n\n      const len2  = +bar2.getAttribute('width'),\n            x2a   = +line2.getAttribute('x1'),\n            x2b   = +line2.getAttribute('x2'),\n            dist2 = (x2b - x2a) - len2;\n\n      // Función de animación para la barra 1 (se mueve de derecha a izquierda)\n      function paso1(ts) {\n        if (!start1) start1 = ts;\n        const p = ((ts - start1) % dur1) / dur1;\n        bar1.setAttribute('x', (x1b - len1) - dist1 * p);\n        anim1 = requestAnimationFrame(paso1);\n      }\n\n      // Función de animación para la barra 2 (se mueve de izquierda a derecha)\n      function paso2(ts) {\n        if (!start2) start2 = ts;\n        const p = ((ts - start2) % dur2) / dur2;\n        bar2.setAttribute('x', x2a + dist2 * p);\n        anim2 = requestAnimationFrame(paso2);\n      }\n\n      // Observador de cambios en el mensaje entrante (msg.payload del ui)\n      scope.$watch('msg', function(msg) {\n        // Si no hay datos o la serie está vacía, detenemos animaciones y ponemos todo transparente\n        if (!msg || !msg.payload || !msg.payload[0]) {\n          cancelAnimationFrame(anim1);\n          cancelAnimationFrame(anim2);\n          bar1.style.color = bar2.style.color = 'transparent';\n          icoPanel.style.color = icoEdif.style.color = icoGrid.style.color = '#cccccc';\n          return;\n        }\n\n        // Extraer últimas lecturas no nulas de cada serie\n        const arr0 = msg.payload[0].data[0],\n              arr1 = msg.payload[0].data[1];\n        function getLastValue(arr) {\n          for (let i = arr.length - 1; i >= 0; i--) {\n            if (arr[i] != null && arr[i] !== 0) return arr[i];\n          }\n          return 0;\n        }\n        let v1 = getLastValue(arr0),\n            v2 = getLastValue(arr1);\n\n        // Limitar valores al rango [0, THRESHOLD]\n        v1 = Math.max(0, Math.min(THRESHOLD, v1));\n        v2 = Math.max(0, Math.min(THRESHOLD, v2));\n\n        // Calcular nueva duración de ciclo en función de v\n        const nd1 = MIN_DURATION_MS + (THRESHOLD - v1)/THRESHOLD * (MAX_DURATION_MS - MIN_DURATION_MS);\n        const nd2 = MIN_DURATION_MS + (THRESHOLD - v2)/THRESHOLD * (MAX_DURATION_MS - MIN_DURATION_MS);\n\n        const a1 = v1 > 0,  // bandera de animación 1\n              a2 = v2 > 0;  // bandera de animación 2\n\n        // Iniciar o detener animación 1 según valor\n        if (a1) {\n          if (!anim1 || Math.abs(nd1 - dur1) > 50) {\n            cancelAnimationFrame(anim1);\n            dur1 = nd1; start1 = null;\n            bar1.setAttribute('x', x1b - len1);\n            anim1 = requestAnimationFrame(paso1);\n          }\n        } else {\n          cancelAnimationFrame(anim1);\n          anim1 = null;\n          bar1.style.color = 'transparent';\n        }\n\n        // Iniciar o detener animación 2 según valor\n        if (a2) {\n          if (!anim2 || Math.abs(nd2 - dur2) > 50) {\n            cancelAnimationFrame(anim2);\n            dur2 = nd2; start2 = null;\n            bar2.setAttribute('x', x2a);\n            anim2 = requestAnimationFrame(paso2);\n          }\n        } else {\n          cancelAnimationFrame(anim2);\n          anim2 = null;\n          bar2.style.color = 'transparent';\n        }\n\n        // Asignar color dinámico a barras según proporción v/THRESHOLD\n        const p1 = v1 / THRESHOLD,\n              p2 = v2 / THRESHOLD;\n        if (a1) bar1.style.color = `rgb(255, ${Math.round(255 - 255*p1)}, ${Math.round(150 - 150*p1)})`;\n        if (a2) bar2.style.color = `rgb(${Math.round(255*(1-p2))}, ${Math.round(255*(1-p2))}, 255)`;\n\n        // Colorear iconos según estado de consumo/inversor/red\n        icoPanel.style.color = v1 > 0 ? '#ffff00' : '#cccccc';\n        icoEdif.style.color  = (msg.consumo || 0) > 0 ? 'orange' : '#cccccc';\n        let gridColor = '#cccccc';\n        if ((msg.grid_power||0) > 0) gridColor = '#4dabf7';\n        else if ((msg.grid_power||0) < 0) gridColor = '#ff7f0e';\n        icoGrid.style.color = gridColor;\n      });\n    })(typeof scope !== 'undefined' ? scope : undefined);\n  </script>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "CSS_Anima",
        "x": 2030,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "6d5655c24320f762",
        "type": "debug",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 480,
        "wires": []
    },
    {
        "id": "41ef5e6f770811db",
        "type": "ui_chart",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "GRAF_CONSUMO",
        "group": "0a6525c364ecabac",
        "order": 1,
        "width": 40,
        "height": "15",
        "label": "PRODUCCIÓN",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "200",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#fad966",
            "#999999",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "CSS_Graf_Consumo",
        "x": 2030,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "80aec98ec71fd81a",
        "type": "comment",
        "z": "2712839e4de2d960",
        "g": "ba3398c131b492c3",
        "name": "Grupo Estilos",
        "info": "Este nodo Template permite editar libremente en CSS el fondo\ndel dashboard.",
        "x": 970,
        "y": 60,
        "wires": []
    },
    {
        "id": "2eb7b242fa01841f",
        "type": "ui_template",
        "z": "2712839e4de2d960",
        "g": "ba3398c131b492c3",
        "group": "0a6525c364ecabac",
        "name": "CSS_Imagen_Cuerva",
        "order": 7,
        "width": "33",
        "height": "1",
        "format": "<style>\n    /* Establece los estilos para el elemento <body> (la página completa) */\n    body {\n        /* Especifica la imagen de fondo que se utilizará en la página */\n        background-image: url('/IMAGEN_FONDO_METEO.png');\n\n        /* Hace que la imagen de fondo cubra toda el área del fondo, ajustándose al tamaño de la ventana */\n        background-size: cover;\n\n        /* Centra la imagen de fondo tanto en el eje horizontal como vertical */\n        background-position: center;\n\n        /* Evita que la imagen de fondo se repita si no cubre toda el área visible */\n        background-repeat: no-repeat;\n    }\n</style>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1220,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "e67f099aa8cac4cf",
        "type": "inject",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Reloj_Email",
        "props": [],
        "repeat": "",
        "crontab": "59 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 990,
        "y": 960,
        "wires": [
            [
                "2895484c0427f6fa"
            ]
        ]
    },
    {
        "id": "2895484c0427f6fa",
        "type": "function",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Consulta_MYSQL",
        "func": "msg.topic = \"SELECT id, fecha, E_Consumido_Direct, E_Suministrada_RED FROM Consumos WHERE DATE(fecha) = CURDATE();\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 960,
        "wires": [
            [
                "968bce566a51f483"
            ]
        ]
    },
    {
        "id": "f6f619f0448031fb",
        "type": "function",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "TABLA_HTML_Fotovoltaica_UNI_Madrid",
        "func": "// Iniciar la estructura básica del HTML con estilos y tabla\nlet html = `\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <style>\n      table { border-collapse: collapse; width: 100%; }\n      th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }\n      th { background-color: #f2f2f2; }\n    </style>\n  </head>\n  <body>\n    <h2>Datos Consumos</h2>\n    <table>\n      <tr>\n        <th>id</th>\n        <th>fecha</th>\n        <th>E_Consumido_Direct</th>\n        <th>E_Suministrada_RED</th>\n      </tr>`;\n\n// Asegurar que msg.payload sea un array antes de recorrerlo\nconst rows = Array.isArray(msg.payload) ? msg.payload : [];\n\n// Agregar una fila por cada registro del array\nrows.forEach(row => {\n    if (row) {\n        html += `\n      <tr>\n        <td>${row.id !== undefined && row.id !== null ? row.id : ''}</td>\n        <td>${row.fecha !== undefined && row.fecha !== null ? row.fecha : ''}</td>\n        <td>${row.E_Consumido_Direct !== undefined && row.E_Consumido_Direct !== null ? row.E_Consumido_Direct : ''}</td>\n        <td>${row.E_Suministrada_RED !== undefined && row.E_Suministrada_RED !== null ? row.E_Suministrada_RED : ''}</td>\n      </tr>`;\n    }\n});\n\n// Cerrar la tabla y el documento HTML\nhtml += `\n    </table>\n  </body>\n</html>`;\n\n// Asignar el HTML al payload\nmsg.payload = html;\n\n// Establecer el asunto del mensaje\nmsg.topic = \"Datos Consumos\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 960,
        "wires": [
            [
                "6bfa28b54d55b8ef",
                "bb30ecb042f62688"
            ]
        ]
    },
    {
        "id": "6bfa28b54d55b8ef",
        "type": "e-mail",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "plecoq@cuervaenergia.com",
        "dname": "Datos_FOTOVOLTAICA_UN_MADRID",
        "x": 2490,
        "y": 960,
        "wires": []
    },
    {
        "id": "5cd7e5a7fa3ae97d",
        "type": "comment",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Grupo Reportes",
        "info": "Este grupo envía los datos recogidos por \nlos sensores y almacenados en MYSQL a un correo \nelectrónico configurado",
        "x": 990,
        "y": 800,
        "wires": []
    },
    {
        "id": "bb30ecb042f62688",
        "type": "debug",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Datos_Email_FOTOVOLTAICA_UN_MADRID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 1020,
        "wires": []
    },
    {
        "id": "518bc6419c455688",
        "type": "xlsx-out",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Excel_FOTOVOLTAICA_UN_MADRID",
        "sheetName": "Consumos",
        "x": 2070,
        "y": 920,
        "wires": [
            [
                "6bfa28b54d55b8ef"
            ]
        ]
    },
    {
        "id": "9ca92545bcb3112e",
        "type": "function",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Formateo_XLSX",
        "func": "// msg.payload contiene los datos obtenidos de la base de datos\nlet data = msg.payload;\n\n// Verificar que 'data' sea un array válido antes de procesar\nif (!Array.isArray(data)) {\n    node.error(\"El payload de entrada no es un array\", msg);\n    // Se usa un array vacío para evitar errores en nodos posteriores\n    data = [];\n}\n\n// Transformar los datos en un array de objetos con las columnas requeridas\nconst excelData = data.map(row => ({\n    E_Consumido_Direct: row.E_Consumido_Direct,\n    E_Suministrada_RED: row.E_Suministrada_RED\n}));\n\n// Actualizar el payload con los datos preparados para exportar\nmsg.payload = excelData;\n\n// Asunto del mensaje (actualizado según el contexto de los datos)\nmsg.topic = \"Datos Consumos\"; // Puede ajustarse según tu preferencia\n\n// Nombre del archivo Excel generado\nmsg.filename = \"Datos_Consumos.xlsx\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 920,
        "wires": [
            [
                "1b5fc013da142ca2",
                "518bc6419c455688"
            ]
        ]
    },
    {
        "id": "1b5fc013da142ca2",
        "type": "debug",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Datos_FOTOVOLTAICA_UN_MADRID_XLSX",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 860,
        "wires": []
    },
    {
        "id": "9c94e6c47e045cc6",
        "type": "comment",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "Grupo Control/Visualización",
        "info": "Este grupo controla la visualización,\n gestión y almacenamiento\n  de los datos",
        "x": 1020,
        "y": 280,
        "wires": []
    },
    {
        "id": "79ac5da96863155c",
        "type": "ui_template",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "group": "0a6525c364ecabac",
        "name": "Selector_Fecha",
        "order": 6,
        "width": "11",
        "height": "6",
        "format": "<style>\n  .period-picker {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 0.1rem;\n    background-color: #2c2c2c;\n    border-radius: 0.75rem;\n    box-shadow: 0 4px 14px rgba(0, 0, 0, 0.5);\n    font-family: 'Helvetica Neue', Arial, sans-serif;\n    color: #e0e0e0;\n    max-width: 400px;\n    margin: 1rem;\n  }\n\n  .period-picker__radios {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    margin-bottom: 0.3rem;\n  }\n\n  .period-picker__radios label {\n    font-size: 0.9rem;\n    cursor: pointer;\n    padding: 0.3rem 0.8rem;\n    border-radius: 0.35rem;\n    background-color: #2e2e3e;\n    color: #ccc;\n    transition: all 0.3s;\n  }\n\n  .period-picker__radios input[type=\"radio\"] {\n    display: none;\n  }\n\n  .period-picker__radios input[type=\"radio\"]:checked+label {\n    background-color: #4a90e2;\n    color: #fff;\n  }\n\n  .period-picker__wrapper {\n    position: relative;\n    width: 85%;\n    margin-bottom: 0.8rem;\n  }\n\n  .period-picker__icon {\n    position: absolute;\n    left: 0.6rem;\n    top: 50%;\n    transform: translateY(-50%);\n    font-size: 1.1rem;\n    color: #4a90e2;\n    pointer-events: none;\n  }\n\n  .period-picker__wrapper::after {\n    content: '▼';\n    position: absolute;\n    right: 0.6rem;\n    top: 50%;\n    transform: translateY(-50%);\n    font-size: 0.75rem;\n    color: #aaa;\n    pointer-events: none;\n  }\n\n  .period-picker__input {\n    width: 100%;\n    padding: 0.35rem 1.7rem;\n    border: 1px solid #444;\n    border-radius: 0.4rem;\n    font-size: 0.85rem;\n    text-align: center;\n    background-color: #2a2a3b;\n    color: #e0e0e0;\n    appearance: none;\n    -webkit-appearance: none;\n  }\n\n  .period-picker__input:focus {\n    outline: none;\n    border-color: #4a90e2;\n    box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.4);\n    background-color: #33334a;\n  }\n\n  .period-picker__input::-webkit-calendar-picker-indicator {\n    opacity: 0;\n    cursor: pointer;\n  }\n\n  .period-picker__wrapper--no-arrow::after {\n    content: none;\n  }\n</style>\n\n<div class=\"period-picker\" ng-init=\"periodType='month'\">\n      <div class=\"period-picker__radios\">\n        <input type=\"radio\" id=\"year\" ng-model=\"periodType\" value=\"year\">\n    <label for=\"year\" ng-click=\"send({ payload: anioSeleccionadoISO, period: 'year' })\">Año</label>\n\n        <input type=\"radio\" id=\"month\" ng-model=\"periodType\" value=\"month\">\n    <label for=\"month\" ng-click=\"send({ payload: mesSeleccionado, period: 'month' })\">Mes</label>\n\n        <input type=\"radio\" id=\"week\" ng-model=\"periodType\" value=\"week\">\n    <label for=\"week\" ng-click=\"send({ payload: semanaSeleccionada, period: 'week' })\">Semana</label>\n\n        <input type=\"radio\" id=\"day\" ng-model=\"periodType\" value=\"day\">\n    <label for=\"day\" ng-click=\"send({ payload: diaSeleccionada, period: 'day' })\">Día</label>\n      </div>\n\n      <div ng-show=\"periodType==='year'\" class=\"period-picker__wrapper period-picker__wrapper--no-arrow\">\n        <i class=\"period-picker__icon\">📅</i>\n        <input\n      type=\"number\"\n      min=\"1900\"\n      max=\"2100\"\n      step=\"1\"\n      placeholder=\"YYYY\"\n      ng-model=\"anioSeleccionado\"\n      ng-change=\"anioSeleccionadoISO = (anioSeleccionado ? (anioSeleccionado + '-01-01') : null); send({ payload: anioSeleccionadoISO, period: periodType })\"\n      class=\"period-picker__input\"\n    />\n  </div>\n\n      <div ng-show=\"periodType==='month'\" class=\"period-picker__wrapper\">\n        <i class=\"period-picker__icon\">📅</i>\n        <input\n      type=\"month\"\n      ng-model=\"mesSeleccionado\"\n      ng-change=\"send({ payload: mesSeleccionado, period: periodType })\"\n      class=\"period-picker__input\"\n    />\n  </div>\n\n      <div ng-show=\"periodType==='week'\" class=\"period-picker__wrapper\">\n        <i class=\"period-picker__icon\">📅</i>\n        <input\n      type=\"week\"\n      ng-model=\"semanaSeleccionada\"\n      ng-change=\"send({ payload: semanaSeleccionada, period: periodType })\"\n      class=\"period-picker__input\"\n    />\n  </div>\n\n      <div ng-show=\"periodType==='day'\" class=\"period-picker__wrapper\">\n        <i class=\"period-picker__icon\">📅</i>\n        <input\n      type=\"date\"\n      ng-model=\"diaSeleccionada\"\n      ng-change=\"send({ payload: diaSeleccionada, period: periodType })\"\n      ng-click=\"send({ payload: diaSeleccionada, period: periodType })\"        class=\"period-picker__input\"\n    />\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 480,
        "wires": [
            [
                "cbcffaba4f2a5fe1"
            ]
        ]
    },
    {
        "id": "53ea2fd20daf41b8",
        "type": "ui_template",
        "z": "2712839e4de2d960",
        "d": true,
        "g": "ba3398c131b492c3",
        "group": "0a6525c364ecabac",
        "name": "CSS_Selector_Dia",
        "order": 8,
        "width": "30",
        "height": "1",
        "format": "<style>\n  /* Contenedor general centrado y bajado 7px */\n  .CSS_Selector_dia {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 7px;\n    /* <-- Cambiado a 7px */\n  }\n\n  /* Input con fondo blanco, texto negro, bordes redondeados */\n  .CSS_Selector_dia input {\n    background-color: #ffffff !important;\n    color: #000000 !important;\n    border: 1px solid #ccc;\n    border-radius: 0.5rem;\n    padding: 0.5rem;\n    font-size: 1rem;\n    box-sizing: border-box;\n    width: auto;\n    min-width: 150px;\n    text-align: center;\n  }\n\n  /* Placeholder si aplica */\n  .CSS_Selector_dia input::placeholder {\n    color: #888 !important;\n  }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1210,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6d977a5c73cafa31",
        "type": "ui_template",
        "z": "2712839e4de2d960",
        "g": "ba3398c131b492c3",
        "group": "0a6525c364ecabac",
        "name": "CSS_Reportes",
        "order": 4,
        "width": "8",
        "height": "11",
        "format": "<!-- Contenedor principal -->\n<div class=\"card mx-auto my-5 text-center\" id=\"report-card\">\n  <div class=\"card-body p-4 d-flex flex-column align-items-center\">\n    <h5 class=\"card-title text-accent mb-4\">Generador de Reportes</h5>\n\n    <!-- Selector de rango -->\n    <div class=\"mb-4 w-100\">\n      <label for=\"rango\" class=\"form-label fw-semibold\">Selecciona el período:</label>\n      <select id=\"rango\" class=\"form-select form-select-dark text-center\" onchange=\"toggleDateInput()\">\n        <option value=\"dia\">Día completo</option>\n        <option value=\"mes\">Mes completo</option>\n      </select>\n    </div>\n\n    <!-- Selector para día -->\n    <div class=\"mb-4 w-100\" id=\"fechaDiaGroup\">\n      <label for=\"fechaDia\" class=\"form-label\">Selecciona un día:</label>\n      <input type=\"date\" id=\"fechaDia\" class=\"form-control form-control-dark text-center\" required>\n    </div>\n\n    <!-- Selector para mes -->\n    <div class=\"mb-4 w-100\" id=\"fechaMesGroup\" style=\"display: none;\">\n      <label for=\"fechaMes\" class=\"form-label\">Selecciona un mes:</label>\n      <input type=\"month\" id=\"fechaMes\" class=\"form-control form-control-dark text-center\" required>\n    </div>\n\n    <!-- Botón de descarga -->\n    <button onclick=\"descargarDatos()\" class=\"btn btn-accent w-100 py-2\">\n      <i class=\"fa fa-download me-2\"></i> Generar Reporte\n    </button>\n  </div>\n</div>\n\n<style>\n  :root {\n    --bg-page: #33334a;\n    --bg-card: #33334a;\n    --text-main: #e0e0e0;\n    --text-muted: #a0a0a0;\n    --accent: #4a90e2;\n    --accent-hover: #357ABD;\n    --input-bg: #33334a;\n    --input-border: #33334a;\n    --input-focus: #4a90e2;\n    --input-focus-shadow: rgba(74, 144, 226, 0.4);\n    --btn-hover-shadow: rgba(0, 0, 0, 0.4);\n  }\n\n  body {\n    background-color: var(--bg-page);\n    color: var(--text-main);\n    font-family: \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  }\n\n  #report-card {\n    max-width: 350px;\n    /* Ancho reducido para un recuadro más estrecho */\n    height: 170px;\n    /* Altura del contenedor */\n    background-color: #2c2c2c;\n    /* Nuevo color de fondo */\n    border-radius: 1rem;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);\n    text-align: center;\n  }\n\n  .card-title {\n    color: var(--accent);\n    font-size: 1.25rem;\n  }\n\n  .form-label {\n    color: var(--text-main);\n    font-size: 0.9rem;\n  }\n\n  .form-label.fw-semibold {\n    font-weight: 600;\n  }\n\n  .form-control-dark,\n  .form-select-dark {\n    background-color: var(--input-bg);\n    border: 1px solid var(--input-border);\n    border-radius: 1rem;\n    color: var(--text-main);\n    transition: box-shadow 0.2s ease, border-color 0.2s ease;\n    text-align: center;\n  }\n\n  .form-control-dark:focus,\n  .form-select-dark:focus {\n    outline: none;\n    border-color: var(--input-focus);\n    box-shadow: 0 0 0 2px var(--input-focus-shadow);\n  }\n\n  .btn-accent {\n    background-color: var(--accent);\n    color: #ffffff;\n    border: none;\n    border-radius: 1rem;\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n\n  .btn-accent:hover {\n    background-color: var(--accent-hover);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 20px var(--btn-hover-shadow);\n  }\n\n  .btn-accent i {\n    vertical-align: middle;\n  }\n</style>\n\n<script>\n  function toggleDateInput() {\n    const rango = document.getElementById('rango').value;\n    document.getElementById('fechaDiaGroup').style.display = rango === 'dia' ? 'block' : 'none';\n    document.getElementById('fechaMesGroup').style.display = rango === 'mes' ? 'block' : 'none';\n    document.getElementById('fechaDia').value = '';\n    document.getElementById('fechaMes').value = '';\n  }\n\n  function descargarDatos() {\n    const rango = document.getElementById('rango').value;\n    let fechaInicio, fechaFin;\n\n    if (rango === 'dia') {\n      const fecha = document.getElementById('fechaDia').value;\n      if (!fecha) {\n        alert('Por favor selecciona un día');\n        return;\n      }\n      fechaInicio = `${fecha}T00:00:00`;\n      fechaFin    = `${fecha}T23:59:59`;\n    } else {\n      const fechaMes = document.getElementById('fechaMes').value;\n      if (!fechaMes) {\n        alert('Por favor selecciona un mes');\n        return;\n      }\n      const [year, month] = fechaMes.split('-');\n      const ultimoDia = new Date(year, month, 0).getDate();\n      fechaInicio = `${year}-${month}-01T00:00:00`;\n      fechaFin    = `${year}-${month}-${String(ultimoDia).padStart(2,'0')}T23:59:59`;\n    }\n\n    window.location.href = `/descargar-excel?inicio=${encodeURIComponent(fechaInicio)}&fin=${encodeURIComponent(fechaFin)}`;\n  }\n\n  (function init() {\n    const today = new Date().toISOString().split('T')[0];\n    document.getElementById('fechaDia').value = today;\n    document.getElementById('fechaMes').value = today.slice(0,7);\n  })();\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1200,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a36fa9eca0f14f8c",
        "type": "http in",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "",
        "url": "/descargar-excel",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1000,
        "y": 1160,
        "wires": [
            [
                "6e936e0799b6103e"
            ]
        ]
    },
    {
        "id": "fa29f937cfa1a388",
        "type": "http response",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2540,
        "y": 1160,
        "wires": []
    },
    {
        "id": "6e936e0799b6103e",
        "type": "function",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Consulta_MYSQL",
        "func": "// Obtener fechas del query (ej: ?inicio=2025-04-22T00:00:00&fin=2025-04-22T23:59:59)\nconst fechaInicioCompleta = msg.req.query.inicio; // e.g., '2025-04-22T00:00:00'\nconst fechaFinCompleta = msg.req.query.fin;     // e.g., '2025-04-23T23:59:59'\n\n// Validar que las fechas existen\nif (!fechaInicioCompleta || !fechaFinCompleta) {\n  node.error(\"Faltan parámetros de fecha 'inicio' o 'fin'\", msg);\n  return null; // Detener el flujo si faltan fechas\n}\n\n// Formato para la cláusula WHERE de SQL (con hora)\nconst fechaInicioSQL = fechaInicioCompleta.replace(\"T\", \" \"); // '2025-04-22 00:00:00'\nconst fechaFinSQL = fechaFinCompleta.replace(\"T\", \" \");     // '2025-04-23 23:59:59'\n\n// Extraer solo la parte de la fecha (YYYY-MM-DD) para comparar si es el mismo día\nconst soloFechaInicio = fechaInicioCompleta.split('T')[0]; // '2025-04-22'\nconst soloFechaFin = fechaFinCompleta.split('T')[0];     // '2025-04-23'\n\nlet sqlQuery = \"\";\nlet queryType = \"\"; // Para indicar al siguiente nodo qué tipo de datos esperar\n\n// Comprobar si el rango es de un solo día o de varios días\nif (soloFechaInicio === soloFechaFin) {\n  // --- CONSULTA PARA UN SOLO DÍA (DATOS POR HORA) ---\n  node.log(\"Generando consulta para un solo día (datos horarios).\");\n  queryType = \"hourly\";\n  sqlQuery = `\n        SELECT\n            fecha,  /* Seleccionamos el timestamp completo */\n            E_Consumido_Direct,\n            E_Suministrada_RED\n        FROM Consumos\n        WHERE fecha >= '${fechaInicioSQL}'\n          AND fecha <= '${fechaFinSQL}'\n        ORDER BY fecha;\n    `;\n\n} else {\n  // --- CONSULTA PARA VARIOS DÍAS (DATOS AGREGADOS POR DÍA) ---\n  node.log(\"Generando consulta para varios días (datos agregados diarios).\");\n  queryType = \"daily\";\n  sqlQuery = `\n        SELECT\n            DATE(fecha) AS dia, /* Agrupamos por día, seleccionamos solo la fecha */\n            SUM(E_Consumido_Direct) AS E_Consumido_Direct_Total, /* Sumamos los consumos del día */\n            SUM(E_Suministrada_RED) AS E_Suministrada_RED_Total  /* Sumamos los suministros del día */\n        FROM Consumos\n        WHERE fecha >= '${fechaInicioSQL}'\n          AND fecha <= '${fechaFinSQL}'\n        GROUP BY DATE(fecha) /* Agrupamos por la fecha (ignorando la hora) */\n        ORDER BY dia;        /* Ordenamos por día */\n    `;\n}\n\nmsg.topic = sqlQuery;\n// Guardamos el tipo de consulta para usarlo en el nodo de formateo\nmsg.queryType = queryType;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1160,
        "wires": [
            [
                "944af3f5821a881c",
                "5100f29857b7e882"
            ]
        ]
    },
    {
        "id": "6d8910b10fc02638",
        "type": "function",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Formateo_XLSX",
        "func": "// msg.payload: Puede ser [[{datos...}], {metadata}] o directamente [{datos...}]\n// msg.queryType: 'hourly' o 'daily'\n\nlet rawData = msg.payload;\nconst queryType = msg.queryType;\n\n// --- *** NUEVO: Manejar posible anidamiento del resultado de MySQL *** ---\n// Comprobar si el payload es un array, tiene 2 elementos (o más, aunque usualmente son 2),\n// y el primer elemento es también un array (estructura anidada típica de este nodo)\nif (Array.isArray(rawData) && rawData.length > 0 && Array.isArray(rawData[0])) {\n    node.log(\"Detectada estructura anidada en payload de MySQL. Extrayendo datos de rawData[0].\");\n    rawData = rawData[0]; // Usar el primer elemento, que es el array de datos real\n}\n// Ahora 'rawData' debería ser el array de objetos de datos [{...}, {...}] o potencialmente [] si no hubo resultados\n\nconst data = rawData; // Renombrar para mantener consistencia con el resto del código\n\nnode.log(\"Formateo_XLSX: Recibido queryType = \" + queryType);\nnode.log(\"Formateo_XLSX: Registros a procesar = \" + (data ? data.length : 'null'));\n// console.log(\"Datos a procesar:\", JSON.stringify(data)); // Descomentar para depuración profunda\n\nlet excelData = [];\n\n// --- Comprobación inicial de datos (después de extraerlos) ---\nif (!data || data.length === 0) {\n    // Ya no es necesariamente una advertencia si la consulta SQL no devolvió filas\n    node.log(\"No hay datos para procesar (la consulta SQL no devolvió filas o fueron filtrados).\");\n    msg.payload = []; // Enviar array vacío para Excel vacío\n    return msg;\n}\n\n// --- Lógica de formateo basada en queryType ---\nif (queryType === 'hourly') {\n    // --- FORMATEO PARA DATOS HORARIOS ---\n    node.log(`Formateando ${data.length} registros horarios para Excel.`);\n    excelData = data.map(row => {\n        if (!row.fecha) {\n            node.warn(\"Registro horario encontrado sin campo 'fecha'. Saltando registro.\");\n            return null;\n        }\n        const fecha = new Date(row.fecha);\n        if (isNaN(fecha.getTime())) {\n            node.warn(`Fecha inválida encontrada en registro horario: ${row.fecha}. Saltando registro.`);\n            return null;\n        }\n        const fechaHora = fecha.toLocaleString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false }).replace(',', '');\n        return {\n            'Fecha y Hora': fechaHora,\n            'E Consumido Directo (kWh)': row.E_Consumido_Direct,\n            'E Suministrada RED (kWh)': row.E_Suministrada_RED\n        };\n    }).filter(row => row !== null);\n\n} else if (queryType === 'daily') {\n    // --- FORMATEO PARA DATOS DIARIOS AGREGADOS ---\n    node.log(`Formateando ${data.length} registros diarios agregados para Excel.`);\n    excelData = data.map(row => {\n        if (!row.dia) {\n            node.warn(\"Registro diario encontrado sin campo 'dia'. Saltando registro.\");\n            return null;\n        }\n        // La fecha viene como 'YYYY-MM-DDTHH:mm:ss.sssZ' (UTC) según tu log\n        const fechaObj = new Date(row.dia);\n        if (isNaN(fechaObj.getTime())) {\n            node.warn(`Fecha inválida encontrada en registro diario: ${row.dia}. Saltando registro.`);\n            return null;\n        }\n        // Formatear a \"dd/mm/yyyy\" usando la zona horaria local del servidor Node-RED\n        const fechaFormateada = fechaObj.toLocaleDateString('es-ES', {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric'\n            // Opcional: Especificar zona horaria si el servidor no está en la correcta\n            // timeZone: 'Europe/Madrid'\n        });\n        return {\n            'Fecha': fechaFormateada,\n            'Consumo Diario Directo Total (kWh)': row.E_Consumido_Direct_Total,\n            'Suministro Diario RED Total (kWh)': row.E_Suministrada_RED_Total\n        };\n    }).filter(row => row !== null);\n\n} else {\n    node.error(\"Tipo de consulta desconocido: \" + queryType);\n    excelData = [{ \"Error\": `Tipo de consulta no reconocido: ${queryType}` }];\n}\n\nnode.log(\"Formateo_XLSX: Registros formateados = \" + excelData.length);\nmsg.payload = excelData; // Payload final para el nodo XLSX\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1160,
        "wires": [
            [
                "82cda4b23e81bef8"
            ]
        ]
    },
    {
        "id": "82cda4b23e81bef8",
        "type": "xlsx-out",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Excel_FOTOVOLTAICA_UN_MADRID",
        "sheetName": "Consumos",
        "x": 2060,
        "y": 1160,
        "wires": [
            [
                "afabf483ebd8d3ad"
            ]
        ]
    },
    {
        "id": "d5a21d2008515361",
        "type": "debug",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1220,
        "wires": []
    },
    {
        "id": "944af3f5821a881c",
        "type": "debug",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1220,
        "wires": []
    },
    {
        "id": "afabf483ebd8d3ad",
        "type": "function",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "name": "Formato.xlsx",
        "func": "// Obtener fechas desde los parámetros del query string\nconst fechaInicio = msg.req.query.inicio.split('T')[0]; // Ejemplo: \"2025-04-22\"\nconst fechaFin = msg.req.query.fin.split('T')[0];       // Ejemplo: \"2025-04-22\"\n\n// Configurar encabezados para forzar la descarga del archivo como .xlsx\nmsg.headers = {\n    \"Content-Type\": \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Tipo MIME correcto para Excel\n    \"Content-Disposition\": `attachment; filename=\"Datos_Consumos_${fechaInicio}_a_${fechaFin}.xlsx\"` // Nombre del archivo dinámico\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 1160,
        "wires": [
            [
                "fa29f937cfa1a388"
            ]
        ]
    },
    {
        "id": "86d6f79577104659",
        "type": "debug",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 540,
        "wires": []
    },
    {
        "id": "4f7f84fb02f728f6",
        "type": "delay",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1250,
        "y": 360,
        "wires": [
            [
                "db5fb5456e5f6a1b"
            ]
        ]
    },
    {
        "id": "ce267b434ea48920",
        "type": "inject",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "Actualización_Persistente",
        "props": [
            {
                "p": "trigger",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1040,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "cbcffaba4f2a5fe1",
        "type": "function",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "Consulta_MYSQL",
        "func": "// ─── Nodo: SQL Gen (polling revisado con parsing de fecha ISO para “year” | “month” | “week” | “day”) ───\n\ntry {\n  // 1) Recuperar últimos settings del flujo\n  let settings = flow.get('lastSettings');\n\n  // 2) Si viene del date-picker: actualizamos settings\n  if (msg.period !== undefined) {\n    settings = { payload: msg.payload, period: msg.period };\n    flow.set('lastSettings', settings);\n\n    // 3) Si viene del polling (msg.trigger) sin settings previos: abortar\n  } else if (msg.trigger === true) {\n    if (!settings) {\n      node.warn(\"Polling ignorado: sin selección previa\");\n      return null;\n    }\n\n    // 4) Caso contrario: no es date-picker ni polling → descartar\n  } else {\n    return null;\n  }\n\n  // 5) Extraer payload y period de settings\n  let payload = settings.payload;\n  const period = settings.period;\n  msg.payload = payload;\n  msg.period = period;\n\n  // 6) Definiciones SQL para agrupar\n  const SQL_BY_MONTH = \"DATE_FORMAT(fecha, '%Y-%m')\";\n  const SQL_BY_DAY = \"DATE_FORMAT(fecha, '%Y-%m-%d')\";\n  const SQL_BY_HOUR = \"DATE_FORMAT(fecha, '%Y-%m-%d %H:00:00')\";\n\n  // Función auxiliar: formatea Date a \"YYYY-MM-DD\" en UTC\n  function fmt(date) {\n    return date.toISOString().slice(0, 10);\n  }\n\n  // 7) Manejo de payload si es un objeto Date\n  if (payload instanceof Date) {\n    const y = payload.getUTCFullYear();\n    const m = payload.getUTCMonth() + 1;\n    const d = payload.getUTCDate();\n\n    if (period === 'month') {\n      msg.payload = `${y}-${String(m).padStart(2, '0')}`;\n    } else if (period === 'week' || period === 'day') {\n      msg.payload = `${y}-${String(m).padStart(2, '0')}-${String(d).padStart(2, '0')}`;\n    }\n    payload = msg.payload;\n  }\n\n  let startDate, endDate, groupBy;\n\n  // 8) Calcular rango y agrupación según el periodo\n  switch (period) {\n    case 'year': {\n      const year = parseInt(payload.split('-')[0], 10);\n      if (isNaN(year)) throw new Error(`Año inválido: ${payload}`);\n\n      startDate = new Date(Date.UTC(year, 0, 1));\n      endDate = new Date(Date.UTC(year, 11, 31, 23, 59, 59));\n      groupBy = SQL_BY_MONTH;\n      break;\n    }\n\n    case 'month': {\n      // Payload \"YYYY-MM\" indica mes anterior; ajustamos un mes adelante\n      const [yIn, mIn] = payload.split('-').map(n => parseInt(n, 10));\n      if (isNaN(yIn) || isNaN(mIn)) throw new Error(`Mes inválido: ${payload}`);\n\n      let yInt = yIn;\n      let mInt = mIn + 1;\n      if (mInt > 12) { mInt = 1; yInt++; }\n\n      startDate = new Date(Date.UTC(yInt, mInt - 1, 1));\n      endDate = new Date(Date.UTC(yInt, mInt, 0, 23, 59, 59));\n      groupBy = SQL_BY_DAY;\n      break;\n    }\n\n    case 'week': {\n      // Payload \"YYYY-MM-DD\" como punto de referencia\n      const [y, m, d] = payload.split('-').map(n => parseInt(n, 10));\n      if ([y, m, d].some(v => isNaN(v))) throw new Error(`Fecha inválida: ${payload}`);\n\n      const base = new Date(Date.UTC(y, m - 1, d));\n      const dow = base.getUTCDay();               // 0=Dom, 1=Lun…6=Sáb\n      const diff = (dow === 0 ? -6 : 1 - dow);     // Ajuste al lunes\n\n      startDate = new Date(base);\n      startDate.setUTCDate(base.getUTCDate() + diff);\n\n      endDate = new Date(startDate);\n      endDate.setUTCDate(startDate.getUTCDate() + 6); // Domingo de la misma semana\n      groupBy = SQL_BY_DAY;\n      break;\n    }\n\n    case 'day': {\n      // Payload \"YYYY-MM-DD\" indica día anterior; ajustamos un día adelante\n      const [Y, M, D] = payload.split('-').map(n => parseInt(n, 10));\n      if ([Y, M, D].some(v => isNaN(v))) throw new Error(`Fecha inválida: ${payload}`);\n\n      let date = new Date(Date.UTC(Y, M - 1, D));\n      date.setUTCDate(date.getUTCDate() + 1);       // Día corregido\n      const corrected = fmt(date);\n\n      // Generar consulta SQL para el periodo \"day\"\n      msg.topic = `\n        SELECT\n          ${SQL_BY_HOUR} AS periodo,\n          SUM(E_Consumido_Direct) AS E_Consumido_Direct,\n          SUM(E_Suministrada_RED)   AS E_Suministrada_RED\n        FROM Consumos\n        WHERE fecha BETWEEN '${corrected} 00:00:00' AND '${corrected} 23:59:59'\n        GROUP BY 1\n        ORDER BY 1\n      `.replace(/\\s+/g, ' ').trim();\n\n      msg.selected_period = 'day';\n      msg.startDate = corrected;\n      msg.endDate = corrected;\n      delete msg.payload;\n      return msg;\n    }\n\n    default:\n      throw new Error(`Periodo desconocido: ${period}`);\n  }\n\n  // 9) Construir consulta SQL para 'year', 'month' y 'week'\n  msg.topic = `\n    SELECT\n      ${groupBy} AS periodo,\n      SUM(E_Consumido_Direct) AS E_Consumido_Direct,\n      SUM(E_Suministrada_RED)   AS E_Suministrada_RED\n    FROM Consumos\n    WHERE fecha BETWEEN '${fmt(startDate)} 00:00:00' AND '${fmt(endDate)} 23:59:59'\n    GROUP BY 1\n    ORDER BY 1\n  `.replace(/\\s+/g, ' ').trim();\n\n  msg.selected_period = period;\n  msg.startDate = fmt(startDate);\n  msg.endDate = fmt(endDate);\n  delete msg.payload;\n\n  return msg;\n\n} catch (err) {\n  node.error(`SQL Gen Error: ${err.message}`, msg);\n  return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 480,
        "wires": [
            [
                "f1e5d6761ba3dc38"
            ]
        ]
    },
    {
        "id": "8080b13d4e3a0db0",
        "type": "function",
        "z": "2712839e4de2d960",
        "g": "76c0e9f2c89dabb0",
        "name": "Conversión_Datos",
        "func": "// Nodo: Conversión a Chart (Actualizado para Consumos)\n// Entrada esperada en msg:\n//   payload: array de filas [{ periodo, E_Consumido_Direct, E_Suministrada_RED }, …]\n//   selected_period: 'year' | 'month' | 'week' | 'day'\n//   startDate, endDate: strings \"YYYY-MM-DD\" que definen el rango\n// Salida:\n//   msg.payload = [ { series: [...], data: [...], labels: [...] } ]\n\n// Validar y extraer datos de entrada\nconst rows = Array.isArray(msg.payload) ? msg.payload : [];\nconst periodType = msg.selected_period;\nconst startDate = msg.startDate;\nconst endDate = msg.endDate;\n\nif (!periodType || !startDate || !endDate) {\n    node.error(\"Faltan datos para generar el chart (selected_period, startDate, endDate).\", msg);\n    return null;\n}\n\n// Función para generar la lista completa de periodos entre startDate y endDate\nfunction genPeriods(start, end, type) {\n    const list = [];\n    let current, startDt, endDt;\n\n    try {\n        startDt = new Date(start + 'T00:00:00Z');\n        endDt = new Date(end + 'T00:00:00Z');\n        if (isNaN(startDt) || isNaN(endDt)) throw new Error(\"Fechas inválidas\");\n        current = new Date(startDt);\n    } catch (err) {\n        node.error(`Error al parsear fechas en genPeriods: ${err.message}`, msg);\n        return list;\n    }\n\n    if (type === 'year') {\n        // 12 meses del año: YYYY-MM\n        const year = startDt.getUTCFullYear();\n        for (let m = 1; m <= 12; m++) {\n            list.push(`${year}-${String(m).padStart(2, '0')}`);\n        }\n\n    } else if (type === 'month' || type === 'week') {\n        // Cada día entre start y end: YYYY-MM-DD\n        while (current <= endDt) {\n            const y = current.getUTCFullYear();\n            const mo = String(current.getUTCMonth() + 1).padStart(2, '0');\n            const da = String(current.getUTCDate()).padStart(2, '0');\n            list.push(`${y}-${mo}-${da}`);\n            current.setUTCDate(current.getUTCDate() + 1);\n            if (list.length > 366) {\n                node.warn(\"genPeriods: rango demasiado largo, se interrumpe bucle.\");\n                break;\n            }\n        }\n\n    } else if (type === 'day') {\n        // Cada hora del día: \"YYYY-MM-DD HH:00:00\"\n        for (let h = 0; h < 24; h++) {\n            const hh = String(h).padStart(2, '0');\n            list.push(`${start} ${hh}:00:00`);\n        }\n    }\n\n    return list;\n}\n\n// Crear un map para acceso rápido a los datos por periodo\nconst dataMap = {};\nrows.forEach(row => {\n    if (row && row.periodo != null) {\n        dataMap[row.periodo] = {\n            e_cons: Number(row.E_Consumido_Direct) || 0,\n            e_sum: Number(row.E_Suministrada_RED) || 0\n        };\n    } else {\n        node.warn(`Fila ignorada por periodo inválido: ${JSON.stringify(row)}`);\n    }\n});\n\n// Generar todas las etiquetas de periodo\nconst fullPeriods = genPeriods(startDate, endDate, periodType);\n\n// Construir el objeto para ui_chart\nconst chart = {\n    series: [\"E_Consumido_Direct\", \"E_Suministrada_RED\"],\n    data: [[], []],\n    labels: []\n};\n\n// Llenar labels y datos (0 si no hay entrada en dataMap)\nfullPeriods.forEach(period => {\n    let label = period;\n\n    if (periodType === 'day') {\n        // Formatear horas a \"HH:MM\"\n        try {\n            const dt = new Date(period.replace(' ', 'T') + 'Z');\n            if (!isNaN(dt)) {\n                label = dt.toLocaleTimeString('es-ES', {\n                    hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'UTC'\n                }).replace(/:\\d{2}$/, match => match); // Eliminar segundos\n            }\n        } catch (e) {\n            // fallback: usar la cadena original\n        }\n    }\n\n    chart.labels.push(label);\n    const entry = dataMap[period] || { e_cons: 0, e_sum: 0 };\n    chart.data[0].push(entry.e_cons);\n    chart.data[1].push(entry.e_sum);\n});\n\n// Preparar salida para ui_chart y limpiar props auxiliares\nmsg.payload = [chart];\ndelete msg.selected_period;\ndelete msg.startDate;\ndelete msg.endDate;\ndelete msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 480,
        "wires": [
            [
                "41ef5e6f770811db",
                "6d5655c24320f762",
                "26825d69f722cab8"
            ]
        ]
    },
    {
        "id": "968bce566a51f483",
        "type": "mysql",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "mydb": "8abc56218783dc0e",
        "name": "DB_Fotov_UNIV_Madrid",
        "x": 1430,
        "y": 960,
        "wires": [
            [
                "f6f619f0448031fb",
                "9ca92545bcb3112e"
            ]
        ]
    },
    {
        "id": "5100f29857b7e882",
        "type": "mysql",
        "z": "2712839e4de2d960",
        "g": "7270bff791d922f6",
        "mydb": "8abc56218783dc0e",
        "name": "DB_Fotov_UNIV_Madrid",
        "x": 1500,
        "y": 1160,
        "wires": [
            [
                "6d8910b10fc02638",
                "d5a21d2008515361"
            ]
        ]
    },
    {
        "id": "295aeb3170c36013",
        "type": "ui_spacer",
        "z": "2712839e4de2d960",
        "name": "spacer",
        "group": "0a6525c364ecabac",
        "order": 5,
        "width": "17",
        "height": "2"
    },
    {
        "id": "5a8b10e16bc2ff01",
        "type": "ui_spacer",
        "z": "2712839e4de2d960",
        "name": "spacer",
        "group": "0a6525c364ecabac",
        "order": 3,
        "width": "4",
        "height": "2"
    },
    {
        "id": "8abc56218783dc0e",
        "type": "MySQLdatabase",
        "name": "Datos_UNI_Madrid",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Datos_Fotov_UNI_Madrid_db",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "0a6525c364ecabac",
        "type": "ui_group",
        "name": "Default",
        "tab": "c3916878ce0ac060",
        "order": 1,
        "disp": false,
        "width": "42",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c3916878ce0ac060",
        "type": "ui_tab",
        "name": "FOTOVOLTAICA UNIVERSIDAD DE MADRID",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]