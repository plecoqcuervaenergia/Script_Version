[
    {
        "id": "d5f9b2a1aa1e8a78",
        "type": "tab",
        "label": "Lectura_SUN2000_Smartlogger",
        "disabled": false,
        "info": "Lectura de INVERSOR SUN2000 através\r\nde Smartlogger Huawei"
    },
    {
        "id": "b8540382a7d2185e",
        "type": "group",
        "z": "d5f9b2a1aa1e8a78",
        "style": {
            "stroke": "#2a2a2a",
            "stroke-opacity": "1",
            "fill": "#0d0d0d",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#cccccc"
        },
        "nodes": [
            "a6bfb5760f8aa6a1",
            "bce4c4cc3d5c1de0",
            "0f7f06b81987176f",
            "97ed47ee311d8567",
            "f7496d2f6acd5a8f",
            "73b3c7973daec8e4",
            "1a1d9f1f14a60d26",
            "696d2f6fe04912f0",
            "e2e09482ca2be0d5",
            "8aca2eedb9741fb0"
        ],
        "x": 174,
        "y": 79,
        "w": 832,
        "h": 422
    },
    {
        "id": "a6bfb5760f8aa6a1",
        "type": "modbus-read",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "Potencia Activa",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "HoldingRegister",
        "adr": "32114",
        "quantity": "2",
        "rate": "5000",
        "rateUnit": "ms",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "4314bf6850d1635a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 300,
        "y": 220,
        "wires": [
            [
                "0f7f06b81987176f"
            ],
            []
        ]
    },
    {
        "id": "bce4c4cc3d5c1de0",
        "type": "debug",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "kWh_TCP-IP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "0f7f06b81987176f",
        "type": "function",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "Lectura/Conver_PA",
        "func": "// Verificamos si msg.payload es un array y tiene al menos 2 elementos (parte alta y baja)\nif (Array.isArray(msg.payload) && msg.payload.length >= 2) {\n    // Asignamos la parte alta (primer valor) y la parte baja (segundo valor)\n    const high = msg.payload[0]; // Parte alta (16 bits)\n    const low = msg.payload[1];  // Parte baja (16 bits)\n\n    // Sumamos la parte alta y baja\n    msg.payload = high + low;\n\n    // Retornamos el resultado de la suma\n    return msg;\n} else {\n    // Si msg.payload no contiene al menos 2 elementos, mostramos un error\n    node.error(\"Payload no contiene dos registros Modbus\", msg);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "bce4c4cc3d5c1de0"
            ]
        ]
    },
    {
        "id": "97ed47ee311d8567",
        "type": "modbus-read",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "Potencia Activa Instantánea",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "HoldingRegister",
        "adr": "32080",
        "quantity": "2",
        "rate": "5000",
        "rateUnit": "ms",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "4314bf6850d1635a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "73b3c7973daec8e4"
            ],
            []
        ]
    },
    {
        "id": "f7496d2f6acd5a8f",
        "type": "debug",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "kW_TCP-IP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "73b3c7973daec8e4",
        "type": "function",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "Lectura/Conver_PAI",
        "func": "// Verificamos que msg.payload es un array con al menos dos registros (parte alta y parte baja)\nif (Array.isArray(msg.payload) && msg.payload.length >= 2) {\n    // Obtenemos la parte alta (primer registro) y la parte baja (segundo registro)\n    const high = msg.payload[0];  // Primeros 16 bits\n    const low = msg.payload[1];   // Siguientes 16 bits\n\n    // Combinamos ambos registros para obtener un valor de 32 bits.\n    // Se desplaza la parte alta 16 bits a la izquierda y se suma la parte baja.\n    const activePowerW = (high << 16) + low;  // Potencia activa en vatios (W)\n\n    // Convertimos a kilovatios (kW) dividiendo entre 1000.\n    // Ajusta este factor de escala según la documentación de tu inversor si fuera distinto.\n    const activePowerKW = activePowerW / 1000;\n\n    // Asignamos el resultado a msg.payload\n    msg.payload = activePowerKW;\n\n    // Retornamos el mensaje con la potencia activa en kW\n    return msg;\n} else {\n    // Si no se reciben los dos registros, mostramos un error en la consola\n    node.error(\"Payload no contiene los dos registros esperados\", msg);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 340,
        "wires": [
            [
                "f7496d2f6acd5a8f"
            ]
        ]
    },
    {
        "id": "1a1d9f1f14a60d26",
        "type": "modbus-read",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "Rendimiento total",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "HoldingRegister",
        "adr": "32106",
        "quantity": "2",
        "rate": "5000",
        "rateUnit": "ms",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "4314bf6850d1635a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 300,
        "y": 460,
        "wires": [
            [
                "e2e09482ca2be0d5"
            ],
            []
        ]
    },
    {
        "id": "696d2f6fe04912f0",
        "type": "debug",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "kWh_TCP-IP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 460,
        "wires": []
    },
    {
        "id": "e2e09482ca2be0d5",
        "type": "function",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "Lectura/Conver_RT",
        "func": "// Verificamos que msg.payload es un array con al menos dos registros (parte alta y parte baja)\nif (Array.isArray(msg.payload) && msg.payload.length >= 2) {\n    // Obtenemos la parte alta (primer registro) y la parte baja (segundo registro)\n    const high = msg.payload[0];  // Primeros 16 bits\n    const low = msg.payload[1];   // Siguientes 16 bits\n\n    // Combinamos ambos registros para obtener un valor de 32 bits.\n    // Se desplaza la parte alta 16 bits a la izquierda y se suma la parte baja.\n    const activePowerW = (high << 16) + low;  // Potencia activa en vatios (W)\n\n    // Convertimos a kilovatios (kW) dividiendo entre 1000.\n    // Ajusta este factor de escala según la documentación de tu inversor si fuera distinto.\n    const activePowerKW = activePowerW / 100;\n\n    // Asignamos el resultado a msg.payload\n    msg.payload = activePowerKW;\n\n    // Retornamos el mensaje con la potencia activa en kW\n    return msg;\n} else {\n    // Si no se reciben los dos registros, mostramos un error en la consola\n    node.error(\"Payload no contiene los dos registros esperados\", msg);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 460,
        "wires": [
            [
                "696d2f6fe04912f0"
            ]
        ]
    },
    {
        "id": "8aca2eedb9741fb0",
        "type": "comment",
        "z": "d5f9b2a1aa1e8a78",
        "g": "b8540382a7d2185e",
        "name": "Lecturas_Modbus_TCP-IP",
        "info": "",
        "x": 310,
        "y": 120,
        "wires": []
    },
    {
        "id": "ac3e85212d811d85",
        "type": "modbus-read",
        "z": "d5f9b2a1aa1e8a78",
        "name": "Modbus_RS_485_Potencia_Activa",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "HoldingRegister",
        "adr": "32114",
        "quantity": "2",
        "rate": "1000",
        "rateUnit": "ms",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "5af6e8dfb7750ad4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 340,
        "y": 640,
        "wires": [
            [
                "6c4fe4c804e93c77"
            ],
            []
        ]
    },
    {
        "id": "6c4fe4c804e93c77",
        "type": "function",
        "z": "d5f9b2a1aa1e8a78",
        "name": "Lectura/Conver_PA",
        "func": "// Verificamos si msg.payload es un array y tiene al menos 2 elementos (parte alta y baja)\nif (Array.isArray(msg.payload) && msg.payload.length >= 2) {\n    // Asignamos la parte alta (primer valor) y la parte baja (segundo valor)\n    const high = msg.payload[0]; // Parte alta (16 bits)\n    const low = msg.payload[1];  // Parte baja (16 bits)\n\n    // Sumamos la parte alta y baja\n    msg.payload = high + low;\n\n    // Retornamos el resultado de la suma\n    return msg;\n} else {\n    // Si msg.payload no contiene al menos 2 elementos, mostramos un error\n    node.error(\"Payload no contiene dos registros Modbus\", msg);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 640,
        "wires": [
            [
                "e774d9e5cc96a358"
            ]
        ]
    },
    {
        "id": "e774d9e5cc96a358",
        "type": "debug",
        "z": "d5f9b2a1aa1e8a78",
        "name": "kWh_RS485",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 640,
        "wires": []
    },
    {
        "id": "4314bf6850d1635a",
        "type": "modbus-client",
        "name": "Smartlogger_Huawei_TCP_IP",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.5",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 4,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": false,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5af6e8dfb7750ad4",
        "type": "modbus-client",
        "name": "",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB1",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    }
]